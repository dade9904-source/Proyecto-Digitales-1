-- ============================================================
-- MULTIPLICADOR 4x4 -- Utilizando Sumas Parciales
-- ============================================================
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity mult4x4_1164 is
  port(
    A : in  STD_LOGIC_VECTOR(3 downto 0);
    B : in  STD_LOGIC_VECTOR(3 downto 0);
    P : out STD_LOGIC_VECTOR(7 downto 0)
  );
end entity;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

architecture Structural of mult4x4_1164 is
  component SUMADOR_4BITS
    port(
      A    : in  STD_LOGIC_VECTOR(3 downto 0);
      B    : in  STD_LOGIC_VECTOR(3 downto 0);
      cin  : in  STD_LOGIC;
      S    : out STD_LOGIC_VECTOR(3 downto 0);
      cout : out STD_LOGIC
    );
  end component;

  signal r0, r1, r2, r3          : STD_LOGIC_VECTOR(7 downto 0);
  signal S01_low, S01_high        : STD_LOGIC_VECTOR(3 downto 0);
  signal S012_low, S012_high      : STD_LOGIC_VECTOR(3 downto 0);
  signal P_low, P_high            : STD_LOGIC_VECTOR(3 downto 0);
  signal c01, c01h, c012, c012h   : STD_LOGIC;
  signal cP, cPh                  : STD_LOGIC;
begin
  -- r0 = (A AND B0) << 0
  r0(0) <= A(0) and B(0);
  r0(1) <= A(1) and B(0);
  r0(2) <= A(2) and B(0);
  r0(3) <= A(3) and B(0);
  r0(4) <= '0'; r0(5) <= '0'; r0(6) <= '0'; r0(7) <= '0';

  -- r1 = (A AND B1) << 1
  r1(0) <= '0';
  r1(1) <= A(0) and B(1);
  r1(2) <= A(1) and B(1);
  r1(3) <= A(2) and B(1);
  r1(4) <= A(3) and B(1);
  r1(5) <= '0'; r1(6) <= '0'; r1(7) <= '0';

  -- r2 = (A AND B2) << 2
  r2(0) <= '0'; r2(1) <= '0';
  r2(2) <= A(0) and B(2);
  r2(3) <= A(1) and B(2);
  r2(4) <= A(2) and B(2);
  r2(5) <= A(3) and B(2);
  r2(6) <= '0'; r2(7) <= '0';

  -- r3 = (A AND B3) << 3
  r3(0) <= '0'; r3(1) <= '0'; r3(2) <= '0';
  r3(3) <= A(0) and B(3);
  r3(4) <= A(1) and B(3);
  r3(5) <= A(2) and B(3);
  r3(6) <= A(3) and B(3);
  r3(7) <= '0';

  -- r0 + r1
  ADD01_L : SUMADOR_4BITS port map(A=>r0(3 downto 0), B=>r1(3 downto 0), cin=>'0',    S=>S01_low,  cout=>c01);
  ADD01_H : SUMADOR_4BITS port map(A=>r0(7 downto 4), B=>r1(7 downto 4), cin=>c01,    S=>S01_high, cout=>c01h);

  -- (r0+r1) + r2
  ADD012_L: SUMADOR_4BITS port map(A=>S01_low,  B=>r2(3 downto 0), cin=>'0',   S=>S012_low,  cout=>c012);
  ADD012_H: SUMADOR_4BITS port map(A=>S01_high, B=>r2(7 downto 4), cin=>c012,  S=>S012_high, cout=>c012h);

  -- ((r0+r1)+r2) + r3
  ADDP_L  : SUMADOR_4BITS port map(A=>S012_low,  B=>r3(3 downto 0), cin=>'0',  S=>P_low, cout=>cP);
  ADDP_H  : SUMADOR_4BITS port map(A=>S012_high, B=>r3(7 downto 4), cin=>cP,   S=>P_high, cout=>cPh);

  P <= P_high & P_low;
end architecture;
